# -*- coding: utf-8 -*-
"""Wine_Quality_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uNTejXLrIMlz4XeGoHOoihaZkz-y6rBY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

"""Data Collection"""

data = pd.read_csv('/content/winequality-red.csv')
data

data.head()

data.isnull().sum()  #checking for missing values

data.shape #data size

"""Data Analysis and Visulaization"""

data.describe() #statistical measures of our data

sns.catplot(x='quality', data=data, kind='count') #number of values for each quality

value_counts_quality = data['quality'].value_counts()
print(value_counts_quality)

#volatitle aciditiy vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',data=data)

#ctric acid contain vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='citric acid',data=data)

"""Correlation
1. +ve
2. -ve
"""

correlation = data.corr()

print(correlation)

#constructing heatmap for better understanding of correlation ( between different parameters and quality)
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':6}, cmap = 'Greens')

"""Data preprocessing"""

#seperating data and variable
X= data.drop('quality',axis=1)
X

"""Label Binarization"""

Y = data['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)
Y

"""Train And Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size = 0.2,random_state=2)

print(X_train)
print(X_test)
print(Y_train)
print(Y_test)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)


print(X.shape)
print(Y.shape)

"""Model Training"""

#Random Forest Classifier
model = RandomForestClassifier()
model.fit(X_train,Y_train)

"""Model Evaluation
Accuracy Score
"""

#accuracy on test data
X_test_predicition = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predicition, Y_test)
test_data_accuracy

"""Building a Predictive System"""

input_data = (7.5,0.5,0.36,6.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

